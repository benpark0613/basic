package com.sample.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static com.sample.utils.ConnectionUtils.getConnection;

import com.sample.vo.Department;
import com.sample.vo.Employee;
import com.sample.vo.Job;

public class EmployeeDao {

	/**
	 * 모든 사원정보를 반환한다.
	 * @return 사원정보 목록
	 * @throws SQLException 데이터베이스 엑세스 작업 중 오류가 발생했을 때
	 */
	public List<Employee> getEmployees(int begin, int end) throws SQLException {
		String sql = "SELECT RN, EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, JOB_ID, DEPARTMENT_ID, DEPARTMENT_NAME "
				   + "FROM (SELECT ROW_NUMBER() OVER (ORDER BY E.EMPLOYEE_ID) RN, "
				   + "      E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, E.PHONE_NUMBER, E.EMAIL, " 
				   + "      E.JOB_ID, D.DEPARTMENT_ID, D.DEPARTMENT_NAME "
				   + "      FROM EMPLOYEES E, DEPARTMENTS D "
				   + "      WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+)) "
				   + "WHERE RN >= ? AND RN <= ? ";  
		
		List<Employee> employees = new ArrayList<>();
		
		Connection connection = getConnection();
		PreparedStatement pstmt = connection.prepareStatement(sql);
		pstmt.setInt(1, begin);
		pstmt.setInt(2, end);
		ResultSet rs = pstmt.executeQuery();
		
		while(rs.next()) {
			Employee employee = new Employee();
			Department department = new Department();
			Job job = new Job();
			
			employee.setId(rs.getInt("employee_id"));
			employee.setFirstName(rs.getString("first_name"));
			employee.setLastName(rs.getString("last_name"));
			employee.setPhoneNumber(rs.getString("phone_number"));
			employee.setEmail(rs.getString("email"));

			job.setId(rs.getString("job_id"));
			
			department.setId(rs.getInt("department_id"));
			department.setName(rs.getString("department_name"));
			
			employee.setJob(job);
			employee.setDepartment(department);
			
			employees.add(employee);
		}
		
		rs.close();
		pstmt.close();
		connection.close();
		
		return employees;
		
	}
	
	/**
	 * 지정된 부서아이디에 소속된 사원정보를 반환한다.
	 * @param departmentId 부서아이디
	 * @return 해당 부서에 소속된 사원정보 목록
	 * @throws SQLException 데이터베이스 엑세스 작업 중 오류가 발생했을 때
	 */
	public List<Employee> getEmployeesByDepartmentId(int departmentId) throws SQLException {
		String sql = "select employee_id, first_name, last_name, email, phone_number, hire_date "
				   + "from employees "
				   + "where department_id = ? "
				   + "order by first_name asc ";
		
		List<Employee> employees = new ArrayList<>();
		
		Connection connection = getConnection();
		PreparedStatement pstmt = connection.prepareStatement(sql);
		pstmt.setInt(1, departmentId);
		ResultSet rs = pstmt.executeQuery();
		
		while (rs.next()) {
			Employee employee = new Employee();
			employee.setId(rs.getInt("employee_id"));
			employee.setFirstName(rs.getString("first_name"));
			employee.setLastName(rs.getString("last_name"));
			employee.setEmail(rs.getString("email"));
			employee.setPhoneNumber(rs.getString("phone_number"));
			employee.setHireDate(rs.getDate("hire_date"));
			
			employees.add(employee);
		}

		rs.close();
		pstmt.close();
		connection.close();
		
		return employees;
	}
}
