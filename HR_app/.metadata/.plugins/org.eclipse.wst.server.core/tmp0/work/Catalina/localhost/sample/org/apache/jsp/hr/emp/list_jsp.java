/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.12
 * Generated at: 2021-11-12 05:05:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.hr.emp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.sample.vo.Employee;
import java.util.List;
import com.sample.dao.EmployeeDao;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sample.dao.EmployeeDao");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.sample.vo.Employee");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../../resources/css/style.css\">\r\n");
      out.write("<title>사원정보 관리::리스트</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>전체 사원 리스트</h1>\r\n");

	// 한 화면에 표시할 행의 갯수
	final int rowsPerPage = 5;
	// 한 화면(블록)에 표시할 페이지번호 갯수
	final int pagesPerBlock = 5;

	// 페이지번호 조회하기
	int currentPageNo = Integer.parseInt(request.getParameter("cpno"));
	// 조회할 데이터범위를 계산하기
	int begin = (currentPageNo - 1)*rowsPerPage + 1;
	int end = currentPageNo*rowsPerPage;

	EmployeeDao employeeDao = new EmployeeDao();
	List<Employee> employeeList = employeeDao.getEmployees(begin, end);

      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<table>\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>아이디</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>전화번호</th>\r\n");
      out.write("				<th>이메일</th>\r\n");
      out.write("				<th>직종아이디</th>\r\n");
      out.write("				<th>소속부서명</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");

	for (Employee emp : employeeList) {

      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>");
      out.print(emp.getId() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(emp.getFirstName() );
      out.write(' ');
      out.print(emp.getLastName() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(emp.getPhoneNumber() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(emp.getEmail() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(emp.getJob().getId() );
      out.write("</td>\r\n");
      out.write("				<td><a href=\"../dept/detail.jsp?deptId=");
      out.print(emp.getDepartment().getId() );
      out.write('"');
      out.write('>');
      out.print(emp.getDepartment().getName() );
      out.write("</a></td>\r\n");
      out.write("			</tr>\r\n");

	}

      out.write("\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");

	// 전체 사원수 조회하기
	int totalRecords = employeeDao.getEmployeesCount();									// 총 레코드 개수 : 107
	// 전체 페이지 갯수 계산하기
	int totalPages = (int)(Math.ceil((double)totalRecords/rowsPerPage));				// 총 페이지 갯수 : ceil(107/rowsPerPage) = 22
	// 전체 블록 갯수 계산하기
	int totalBlocks = (int)(Math.ceil((double)totalPages/pagesPerBlock));				// 총 블록 갯수 : ceil(22/pagesPerBlock) = 5
	
	// 현재 블록 계산하기
	int currentBlock = (int)(Math.ceil((double)currentPageNo/pagesPerBlock));			// 현재 블록번호 : ceil(7/pagesPerBlock) = 2
	// 현재 블록의 시작페이지번호와 끝페이지번호 계산하기
	int beginPageNo = (currentBlock - 1)*pagesPerBlock + 1;								// 현재 블록의 시작 페이지번호 : 6
	int endPageNo = currentBlock*pagesPerBlock;											// 현재 블록의 끝 페이지번호: 10
	if (currentBlock == totalBlocks) {
		endPageNo = totalPages;
	}

      out.write("\r\n");
      out.write("	<div class=\"text-center pagination\">\r\n");
      out.write("		<a href=\"list.jsp?cpno=");
      out.print((currentBlock - 1)*pagesPerBlock );
      out.write("\" class=\"");
      out.print(currentBlock == 1 ? "disabled" : "" );
      out.write("\">이전</a>\r\n");

	for (int pno = beginPageNo; pno <= endPageNo; pno++) {

      out.write("\r\n");
      out.write("		<a href=\"list.jsp?cpno=");
      out.print(pno );
      out.write("\" class=\"");
      out.print(pno == currentPageNo ? "active" : "" );
      out.write('"');
      out.write('>');
      out.print(pno );
      out.write("</a>\r\n");

	}

      out.write("\r\n");
      out.write("		<a href=\"list.jsp?cpno=");
      out.print(currentBlock*pagesPerBlock + 1 );
      out.write("\" class=\"");
      out.print(currentBlock == totalBlocks ? "disabled" : "" );
      out.write("\">다음</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
