package com.sample.dao;

import static com.sample.utils.ConnectionUtils.getConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.sample.vo.Department;
import com.sample.vo.Employee;
import com.sample.vo.Location;

public class DepartmentDao {
	
	public Department getDepartmentById(int departmentId) throws SQLException {
		String sql = "select D.department_id, D.department_name, E.employee_id, E.first_name, E.last_name, L.location_id, L.city "
				   + "from departments D, employees E, locations L "
				   + "where D.manager_id = E.employee_id(+) "
				   + "and D.location_id = L.location_id "
				   + "order by D.department_id asc "
				   + "and D.department_id = ? ";
		
		Department department = null;
		
		Connection connection = getConnection();
		PreparedStatement pstmt = connection.prepareStatement(sql);
		pstmt.setInt(1, departmentId);
		ResultSet rs = pstmt.executeQuery();
		
		if (rs.next()) {
			department = new Department();
			department.setId(rs.getInt("departmentId"));
		}
		
		rs.close();
		pstmt.close();
		connection.close();
		
		return department;
	}

	/**
	 * 전체 부서목록을 반환한다.
	 * @return 부서정보 목록
	 * @throws SQLException 데이터베이스 엑세스 작업 중 오류가 발생했을 때
	 */
	public List<Department> getAllDepartments() throws SQLException {
		String sql = "select D.department_id, D.department_name, E.employee_id, E.first_name, E.last_name, L.location_id, L.city "
				   + "from departments D, employees E, locations L "
				   + "where D.manager_id = E.employee_id(+) "
				   + "and D.location_id = L.location_id "
				   + "order by D.department_id asc ";
		
		List<Department> departments = new ArrayList<>();
		
		Connection connection = getConnection();
		PreparedStatement pstmt = connection.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		
		while (rs.next()) {
			Department department = new Department();
			Employee manager = new Employee();
			Location location = new Location();
			// 부서정보 조회해서 담기
			department.setId(rs.getInt("department_id"));
			department.setName(rs.getString("department_name"));
			// 부서관리자 정보 조회해서 담기
			manager.setId(rs.getInt("employee_id"));
			manager.setFirstName(rs.getString("first_name"));
			manager.setLastName(rs.getString("last_name"));
			// 부서소재지 정보 조회해서 담기
			location.setId(rs.getInt("location_id"));
			location.setCity(rs.getString("city"));
			// 부서관리자정보와 부서소재지 정보를 Department객체에 담기
			department.setManager(manager);
			department.setLocation(location);
			// 위에서 생성한 ArrayList객체에 부서정보 저장하기
			departments.add(department);
		}
		
		rs.close();
		pstmt.close();
		connection.close();
		
		return departments;
	}
}
