/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.12
 * Generated at: 2021-11-12 00:45:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.hr.dept;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.sample.vo.Employee;
import java.util.List;
import com.sample.dao.EmployeeDao;
import com.sample.vo.Department;
import com.sample.dao.DepartmentDao;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sample.dao.EmployeeDao");
    _jspx_imports_classes.add("com.sample.vo.Department");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.sample.vo.Employee");
    _jspx_imports_classes.add("com.sample.dao.DepartmentDao");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"../../resources/css/style.css\">\r\n");
      out.write("<title>부서정보 관리::부서 상세정보</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>부서 정보</h1>\r\n");

	/*
		- 부서목록에서 부서상세정보를 요청했을 때 실행되는 JSP다.
		- 부서목록에서 부서상세정보를 요청할 때는 "detail.jsp?deptId=부서아이디" 형식의 요청URL이 서버로 전달된다.
		- 쿼리스트링(deptId=부서아이디)은 브라우저에서 부서상세정보를 조회하기 위해서 클릭한 부서의 아이디 정보를 나타낸다.
		- Tomcat은 쿼리스트링을 분석해서 요청객체의 요청파라미터정보에 저장한다.
		- Tomcat은 detail_jsp객체의 _jspService(request, response) 메소드를 실행할 때, 요청객체와 응답객체를 인자로 전달한다.
		- _jspService(request, response)  메소드의 코드로 포함되는 JSP 코드에서 request변수와 response변수에 전달된
		  요청객체, 응답객체를 활용할 수 있다.
		- 특히, 클라이언트가 서버로 전달한 요청파라미터값은 요청객체의 getParameter(String name) 메소드를 사용해서 조회할 수 있다.
	*/

	int departmentId = Integer.parseInt(request.getParameter("deptId"));
	
	DepartmentDao departmentDao = new DepartmentDao();
	EmployeeDao employeeDao = new EmployeeDao();
	
	// 부서아이디로 부서 상세정보 조회하기
	Department department = departmentDao.getDepartmentById(departmentId);
	// 부서아이디로 해당 부서에 소속된 사원수 조회하기
	int employeesCount = departmentDao.getEmployeesCountById(departmentId);
	// 부서아이디로 해당 부서에 소속된 전체 사원정보 조회하기
	List<Employee> employeeList = employeeDao.getEmployeesByDepartmentId(departmentId);
	

      out.write("\r\n");
      out.write("	<h3>부서 상세정보</h3>\r\n");
      out.write("	<table>\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>아이디</th>\r\n");
      out.write("				<th>부서명</th>\r\n");
      out.write("				<th>부서관리자</th>\r\n");
      out.write("				<th>부서소재지</th>\r\n");
      out.write("				<th>소속 사원수</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>");
      out.print(departmentId );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(department.getName() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(department.getManager().getFirstName() );
      out.write(' ');
      out.write(' ');
      out.print(department.getManager().getLastName() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(department.getLocation().getCity() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(employeesCount );
      out.write(" 명</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"text-right\">\r\n");
      out.write("		<a href=\"modifyform.jsp?deptId=");
      out.print(departmentId );
      out.write("\">수정</a>\r\n");

	if (employeesCount == 0) {

      out.write("\r\n");
      out.write("		<a href=\"delete.jsp?deptId=");
      out.print(departmentId );
      out.write("\">삭제</a>\r\n");

	}

      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<h3>소속 사원 리스트</h3>\r\n");
      out.write("	<table>\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>아이디</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>이메일</th>\r\n");
      out.write("				<th>전화번호</th>\r\n");
      out.write("				<th>입사일</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");

	if (employeeList.isEmpty()) {

      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td class=\"text-center\" colspan=\"5\">소속된 사원이 없습니다.</td>\r\n");
      out.write("			</tr>\r\n");
 	
	} else {
		for (Employee employee : employeeList) {

      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>");
      out.print(employee.getId() );
      out.write("</td>\r\n");
      out.write("				<td><a href=\"\">");
      out.print(employee.getFirstName() );
      out.write(' ');
      out.print(employee.getLastName() );
      out.write("</a></td>\r\n");
      out.write("				<td>");
      out.print(employee.getEmail() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(employee.getPhoneNumber() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(employee.getHireDate() );
      out.write("</td>\r\n");
      out.write("			</tr>	\r\n");
		
		}		
	}

      out.write("\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"text-right\">\r\n");
      out.write("		<a href=\"list.jsp\">부서 목록</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
