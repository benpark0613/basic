/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.12
 * Generated at: 2021-11-11 08:54:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.hr.dept;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.sample.vo.Location;
import com.sample.dao.LocationDao;
import com.sample.vo.Employee;
import java.util.List;
import com.sample.dao.EmployeeDao;
import com.sample.vo.Department;
import com.sample.dao.DepartmentDao;

public final class modifyform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sample.dao.EmployeeDao");
    _jspx_imports_classes.add("com.sample.vo.Department");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.sample.vo.Employee");
    _jspx_imports_classes.add("com.sample.vo.Location");
    _jspx_imports_classes.add("com.sample.dao.DepartmentDao");
    _jspx_imports_classes.add("com.sample.dao.LocationDao");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"../../resources/css/style.css\">\r\n");
      out.write("<title>부서정보 관리::수정폼</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>부서정보 수정폼</h1>\r\n");

	/*
		부서상세화면에서 수정화면을 요청한다.
		부서상세화면에서 "modifyform.jsp?deptId=부서아이디" 요청을 서버로 보낸다.
	*/
	
	int departmentId = Integer.parseInt(request.getParameter("deptId"));
	
	DepartmentDao departmentDao = new DepartmentDao();
	EmployeeDao employeeDao = new EmployeeDao();
	LocationDao locationDao = new LocationDao();
	
	// 부서아이디에 해당하는 부서상세정보 조회
	Department department = departmentDao.getDepartmentById(departmentId);
	// 해당 부서에 소속된 직원들 조회
	List<Employee> employees = employeeDao.getEmployeesByDepartmentId(departmentId);
	// 모든 부서소재지정보 조회
	List<Location> locations = locationDao.getAllLocations();

      out.write("\r\n");
      out.write("	<div>\r\n");
      out.write("		<form class=\"well\" method=\"post\" action=\"update.jsp\">\r\n");
      out.write("			<div class=\"form-group\">\r\n");
      out.write("				<label>부서아이디</label>\r\n");
      out.write("				<input type=\"text\" name=\"id\" value=\"");
      out.print(department.getId() );
      out.write("\" readonly=\"readonly\" />\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"form-group\">\r\n");
      out.write("				<label>부서명</label>\r\n");
      out.write("				<input type=\"text\" name=\"name\" value=\"");
      out.print(department.getName() );
      out.write("\" />\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"form-group\">\r\n");
      out.write("				<label>부서 관리자</label>\r\n");

	if (employees.isEmpty()) {

      out.write("\r\n");
      out.write("				<!-- disabled=\"disabled\" 속성이 정의된 필드는 서버로 제출되지 않는다. -->\r\n");
      out.write("				<input type=\"text\" name=\"managerId\" value=\"해당 부서에 소속된 사원이 없습니다.\" disabled=\"disabled\" />\r\n");

	} else {

      out.write("\r\n");
      out.write("				<select name=\"managerId\">\r\n");

		for (Employee emp : employees) {

      out.write("		\r\n");
      out.write("					<option value=\"");
      out.print(emp.getId() );
      out.write('"');
      out.write(' ');
      out.print(emp.getId() == department.getManager().getId() ? "selected" : "" );
      out.write(' ');
      out.write('>');
      out.write(' ');
      out.print(emp.getFirstName() );
      out.write(' ');
      out.print(emp.getLastName() );
      out.write("</option>\r\n");
 
		}
	}

      out.write("\r\n");
      out.write("				</select>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"from-group\">\r\n");
      out.write("			<label>부서 소재지</label>\r\n");
      out.write("			<select name=\"locationId\">\r\n");

	for (Location loc : locations) {

      out.write("\r\n");
      out.write("					<option value=\"");
      out.print(loc.getId() );
      out.write('"');
      out.write(' ');
      out.print(loc.getId() == department.getLocation().getId() ? "selected" : "" );
      out.write('>');
      out.write(' ');
      out.print(loc.getCity() );
      out.write(' ');
      out.write('(');
      out.print(loc.getCountryId() );
      out.write(") </option>\r\n");

	}

      out.write("\r\n");
      out.write("				</select>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"text-right\">\r\n");
      out.write("				<button class=\"btn\">수정</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
